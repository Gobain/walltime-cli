#!/usr/bin/env node

'use strict';
const program = require('commander');

if (typeof localStorage === "undefined" || localStorage === null) {
    var LocalStorage = require('node-localstorage').LocalStorage;
    var localStorage = new LocalStorage('./db');
}

const btc = require('bitcore-lib');
const bip38 = require('bip38');
const wif = require('wif');
const ee = require('easy-encryption');

program
    .option('-t, --testnet', 'use testnet')
    .option('-j, --json', 'return in json format')
    .option('-P, --privkey', 'return unenctrypted private key on screen (CAUTION!)')
    .parse(process.argv);

var password = process.env.WT_SECRET;

if (!password) {
    if (program.json) {
        console.log(JSON.stringify({'error' : true}));
    } else {
        console.error('Set WT_SECRET env variable and we can decrypt your credentials.');
    }
} else {
    var network;

    if (program.testnet) {
        network = btc.Networks.testnet;
    } else {
        network = btc.Networks.livenet;
    }

    if (!localStorage.getItem(network + '.pub')) {
        if (program.json) {
            console.log(JSON.stringify({'error': true}));
        } else {
            console.error('You don\'t have credentials yet. Create one using init command.');
        }
    } else {
        var encryptedPrivKey = ee.decrypt(password, localStorage.getItem(network + '.sec'));
        var address = ee.decrypt(password, localStorage.getItem(network + '.pub'));
        var uuid = localStorage.getItem(network + '.uuid') &&
                ee.decrypt(password, localStorage.getItem(network + '.uuid'));

        var decryptedKey;

        if (program.privkey) {
            decryptedKey = bip38.decrypt(encryptedPrivKey, password);
            decryptedKey = wif.encode(0x80, decryptedKey.privateKey, decryptedKey.compressed);
        }

        if (!program.json) {
            console.log('');
            console.log('Address:', '\n' + address);
            console.log('\nBIP-38 encrypted private key:', '\n' + encryptedPrivKey);

            if (decryptedKey) {
                console.log('\nUnencrypted private key:', '\n' + decryptedKey);
            }

            if (!uuid) {
                console.log('\n*** UUID is undefined! Please, define it calling "walltime setup <uuid>".');
            } else {
                console.log('\nUUID:', '\n' + uuid);
            }

            console.log('');
        } else {
            var result = {};
            result['address'] = address;
            result['bip38_privkey'] = encryptedPrivKey;

            if (decryptedKey) {
                result['privkey'] = decryptedKey;
            }

            if (uuid) {
                result['uuid'] = uuid;
            }

            console.log(JSON.stringify(result));
        }
    }
}