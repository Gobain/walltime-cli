#!/usr/bin/env node

'use strict';
const program = require('commander');

if (typeof localStorage === "undefined" || localStorage === null) {
    var LocalStorage = require('node-localstorage').LocalStorage;
    var localStorage = new LocalStorage('./db');
}

const btc = require('bitcore-lib');
const ee = require('easy-encryption');
const validator = require('validator');
const crypto = require('crypto');
const axios = require('axios');
const n2f = require('num2fraction');
const colors = require('colors');
const pck = require('./package.json');
const common = require('./common');

var password = process.env.WT_SECRET;

const JSON_ERROR = { status : { success : false }};

var checkForPassword = function() {
    if (!password) {
        if (program.json) {
            console.log(JSON.stringify(JSON_ERROR));
        } else {
            console.error('Please, set the WT_SECRET env variable. It is required to encrypt/decrypt your credentials on disk.');
        }
    }

    return password;
};

var checkForCredentials = function() {
    var hasCredentials = localStorage.getItem(getNetwork() + '.pub');

    if (!hasCredentials) {
        if (program.json) {
            console.log(JSON.stringify(JSON_ERROR));
        } else {
            console.error('You don\'t have credentials yet. Create one using "init" command.');
        }
    }

    return hasCredentials;
};

var checkForUUID = function() {
    var hasCredentials = localStorage.getItem(getNetwork() + '.uuid');

    if (!hasCredentials) {
        if (program.json) {
            console.log(JSON.stringify(JSON_ERROR));
        } else {
            console.error('You don\'t have UUID configured yet. Use "setup" command to set one.');
        }
    }

    return hasCredentials;
};

var getNetwork = function() {
    var network;

    if (program.testnet) {
        network = btc.Networks.testnet;
    } else {
        network = btc.Networks.livenet;
    }

    return network;
};

var getEnv = function() {
    var env;

    if (getNetwork() === btc.Networks.testnet) {
        env = 'testnet';
    } else {
        env = 'production';
    }

    return env;
};

program
    .version(pck.version)
    .option('-t, --testnet', 'use testnet')
    .option('-v, --verbose', 'verbose mode')
    .option('-j, --json', 'return in json format when possible')
    .description('Walltime CLI is the Walltime Digital Assets Exchange Command Line Interface. With this app, you can easily retrieve market info and manipulate your account.')
    .usage('[-tvj] <command> [-h|<args>]')
    .on('--help', function() {
        console.log('');
        console.log('The following commands, use walltime <command> -h to see more details:');
        console.log('');
        console.log('    accountstatement');
        console.log('    addbankaccount');
        console.log('    createorder');
        console.log('    informdeposit');
        console.log('    withdraw');
        console.log('');
        console.log('Use walltime <command> -h to see more info about each command.');

        if (!password) {
            console.log('');
            console.log(colors.white.bold('*** IMPORTANT ***'));
            console.log('');
            console.log('To be able to use some commands, you have to set the system environment variable WT_SECRET to a secret that will be used to encrypt your credentials on disk. To keep it safe, it is recommended to clear this variable later.');
            console.log('');
            console.log('On Linux, use:');
            console.log('');
            console.log('\texport WT_SECRET=<yoursecret>');
            console.log('');
            console.log('On Windows, use:');
            console.log('');
            console.log('\tset WT_SECRET=<yoursecret>');
        } else {
            console.log(colors.green.bold('âžœ $WT_SECRET is set, remember to cleanup this later.'));
        }

        console.log('');
    });

program
    .command('init')
    .usage('[-fP]')
    .description('Build new credentials.')
    .option('-f, --force', 'force regenerate (overwrite) credentials (CAUTION!)')
    .option('-P, --privkey', 'show unencrypted private key on screen (CAUTION!)')
    .action(function(options) {
        if (checkForPassword()) {
            var network = getNetwork();

            if (localStorage.getItem(network + '.pub') && !options.force) {
                if (program.json) {
                    console.log(JSON.stringify(JSON_ERROR));
                } else {
                    console.error('You already have stored credentials. Use -f to force overwrite.');
                }
            } else {
                if (localStorage.getItem(network + '.pub') && !program.json) {
                    console.warn('[WARN] The credentials was overwritten!');
                }

                if (!program.json) {
                    console.log('Generating your credentials...');
                }

                var privateKey = new btc.PrivateKey();
                var address = privateKey.toAddress(network);

                var decryptedPrivateKey = privateKey.toWIF();

                if (!program.json) {
                    console.log('');
                    console.log('DONE! Now, please inform the following address to our 24h support in https://m.me/walltime.info and identify yourself.');
                    console.log('');
                    console.log('*** IMPORTANT: You will receive from our support an UUID and you have to call "walltime setup <UUID>" before call some commands.');
                    console.log('==========================================');
                    console.log(address.toString());
                    console.log('==========================================');

                    if (options.privkey) {
                        console.log('');
                        console.log('As requested, follow your unencrypted private key, BE CAREFUL:');
                        console.log('==========================================');
                        console.log(decryptedPrivateKey);
                        console.log('==========================================');
                        console.log('');
                    }
                }

                if (program.json) {
                    var result = {};
                    result['address'] = address.toString();

                    if (options.privkey) {
                        result['privkey'] = decryptedPrivateKey;
                    }

                    console.log(JSON.stringify(result));
                }

                localStorage.setItem(network + '.pub', ee.encrypt(password, address.toString()));
                localStorage.setItem(network + '.sec', ee.encrypt(password, decryptedPrivateKey));
            }
        }
    }).on('--help', function() {
        console.log('');
        console.log('Use it only in the very FIRST time. The credentials are kept saved on disk.');
        console.log('');
    });

program
    .command('setup <useruuid>')
    .usage('<useruuid>')
    .description('Setup your user UUID.')
    .action(function(uuid) {
        if (!validator.isUUID(uuid)) {
            if (program.json) {
                console.log(JSON.stringify(JSON_ERROR));
            } else {
                console.error(uuid, 'is not a valid UUID.');
            }
        } else if (checkForPassword() && checkForCredentials()) {
            var network = getNetwork();

            if (localStorage.getItem(network + '.uuid') && !program.json) {
                console.warn('[WARN] The UUID was overwritten!');
            }

            if (program.json) {
                console.log(JSON.stringify({'success': true}));
            } else {
                localStorage.setItem(network + '.uuid', ee.encrypt(password, uuid));
                console.log('UUID stored!');
            }
        }
    }).on('--help', function() {
        console.log('');
        console.log('After call "init" and inform the address to our Walltime online support you will receive an UUID. You then have to call this command with this informed UUID.');
        console.log('');
    });

program
    .command('show')
    .usage('[-P]')
    .description('Show your credentials (for backup).')
    .option('-P, --privkey', 'show unencrypted private key on screen (CAUTION!)')
    .action(function(options) {
        if (checkForPassword() && checkForCredentials()) {
            var network = getNetwork();
            var address = ee.decrypt(password, localStorage.getItem(network + '.pub'));
            var uuid = localStorage.getItem(network + '.uuid') &&
                ee.decrypt(password, localStorage.getItem(network + '.uuid'));

            var decryptedKey = ee.decrypt(password, localStorage.getItem(network + '.sec'));

            if (!program.json) {
                console.log('');
                console.log('Address:', '\n' + address);

                if (options.privkey) {
                    console.log('\nUnencrypted private key:', '\n' + decryptedKey);
                }

                if (!uuid) {
                    console.log('\n*** UUID is undefined! Please, define it calling "walltime setup <uuid>".');
                } else {
                    console.log('\nUUID:', '\n' + uuid);
                }

                if (!options.privkey) {
                    console.warn('\n[WARN] Use the option -P to show the private key as well.');
                }

                console.log('');
            } else {
                var result = {};
                result['address'] = address;

                if (options.privkey) {
                    result['privkey'] = decryptedKey;
                }

                if (uuid) {
                    result['uuid'] = uuid;
                }

                console.log(JSON.stringify(result));
            }
        }
    });

program
    .command('restore <wifprivkey>')
    .usage('[-f] <wifprivkey>')
    .description('Restore credentials from backup.')
    .option('-f, --force', 'force overwrite credentials (CAUTION!)')
    .action(function(privkey, options) {
        if (checkForPassword()) {
            var network = getNetwork();

            if (localStorage.getItem(network + '.pub') && !options.force) {
                if (program.json) {
                    console.log(JSON.stringify(JSON_ERROR));
                } else {
                    console.error('You already have stored credentials. Use -f to force overwrite.');
                }
            } else {
                if (localStorage.getItem(network + '.pub') && !program.json) {
                    console.warn('[WARN] The credentials was overwritten!');
                }

                var privateKey = btc.PrivateKey.fromWIF(privkey);
                var address = privateKey.toAddress(network);

                if (!program.json) {
                    console.log('');
                    console.log('Done! Now, please inform the following address to our 24h support in https://m.me/walltime.info and identify yourself.');
                    console.log('==========================================');
                    console.log(address.toString());
                    console.log('==========================================');
                    console.log('');
                } else {
                    var result = {};
                    result['address'] = address.toString();
                    result['bip38_privkey'] = privateKeyEncrypted;
                    console.log(JSON.stringify(result));
                }

                localStorage.setItem(network + '.pub', ee.encrypt(password, address.toString()));
                localStorage.setItem(network + '.sec', ee.encrypt(password, privkey));
            }
        }
    });

program
    .command('info [field]')
    .usage('[field]')
    .description('Retrieve general market info.')
    .action(function(field) {
        var env = getEnv();
        var url = 'https://s3.amazonaws.com/data-' + env + '-walltime-info/'
                + env + '/dynamic/walltime-info.json?nocache=' + common.nonce();

        if (program.verbose) {
            console.log('GET ' + url);
            console.log();
        }

        axios.get(url)
            .then(response => {
                if (!field) {
                    console.log(response.data);
                } else {
                    var fieldValue = response.data[field] || response.data['BRL_XBT'][field];

                    if (program.json) {
                        console.log(JSON.stringify({'result': fieldValue}));
                    } else {
                        console.log(fieldValue);
                    }
                }
            })
            .catch(error => {
                if (program.json) {
                    console.log(JSON.stringify(JSON_ERROR));
                } else {
                    console.error(error);
                }
            });

    });

program
    .command('trades [year_month_day_hour|iso8601]')
    .usage('[year_month_day_hour|iso8601]')
    .description('Retrieve global last trades of a given interval of hour (UTC).')
    .action(function(dateStr) {
        if (!dateStr) {
            dateStr = new Date().toISOString();
        }

        if (dateStr.split('_').length != 4 && !validator.isISO8601(dateStr)) {
            if (program.json) {
                console.log(JSON.stringify(JSON_ERROR));
            } else {
                console.error('Invalid argument. You have to use <year_month_day_hour> or <ISO8601> date format.');
            }
        } else {
            if (validator.isISO8601(dateStr)) {
                var parsedDate = new Date(Date.parse(dateStr));

                if (program.verbose) {
                    console.log(parsedDate);
                    console.log();
                }

                dateStr = parsedDate.getUTCFullYear()
                        + '_' + (('0' + (parsedDate.getUTCMonth() + 1)).slice(-2))
                        + '_' + (('0' + parsedDate.getUTCDate()).slice(-2))
                        + '_' + (('0' + parsedDate.getUTCHours()).slice(-2));
            }

            var env = getEnv();

            if (program.verbose) {
                console.log('Retrieving meta information...');
            }

            common.metaInfo(env).then(a => {
                var url = 'https://s3.amazonaws.com/data-' + env + '-walltime-info/' + env + '/dynamic/'
                    + a.data.last_trades_prefix + '_BRL-XBT_' + dateStr + '_p0.json?now=' + common.nonce();

                if (program.verbose) {
                    console.log('GET ' + url);
                    console.log();
                }

                return axios.get(url);
            }).then(response => {
                console.log(response.data);
            })
            .catch(error => {
                if (program.json) {
                    console.log(JSON.stringify(JSON_ERROR));
                } else {
                    console.error(error);
                }
            });
        }
    })
    .on('--help', function() {
        console.log('');
        console.log('Examples:');
        console.log('');
        console.log('\twalltime trades 2018_06_29_13');
            console.log('\twalltime trades 2018-06-29T13:00:00Z');
        console.log('\twalltime trades 2018-06-29T10:00:00-0300 (Brazilian default timezone)');
        console.log('');
        console.log('\t=> trades between 2018-06-29 1PM and 2PM UTC.');
        console.log('');
        console.log('Month, day and hour are left zero-padded with total of two digits (e.g. 02, 03, 04 etc.)');
        console.log('');
    });

program
    .command('orderbook [page]')
    .usage('[page|-T|-r]')
    .option('-T, --totalpages', 'Show total of pages.')
    .option('-r, --round', 'Show current round.')
    .description('Retrieve order book information.')
    .action(function(page, options) {
        var env = getEnv();

        if (program.verbose) {
            console.log('Retrieving meta information...');
        }

        common.metaInfo(env).then(a => {
            if (options.round) {
                console.log(a.data.current_round);
                return null;
            } else if (options.totalpages) {
                console.log(a.data.order_book_pages);
                return null;
            } else {
                if (!page) {
                    page = '0';
                }

                var url = 'https://s3.amazonaws.com/data-' + env + '-walltime-info/' + env + '/dynamic/'
                        + a.data.order_book_prefix + '_r' + a.data.current_round
                        + '_p' + page + '.json?now=' + common.nonce();

                if (program.verbose) {
                    console.log('GET ' + url);
                    console.log();
                }

                return axios.get(url);
            }
        }).then(response => {
                if (response && response.data) {
                    console.log(response.data);
                }
            })
        .catch(error => {
            if (program.json) {
                console.log(JSON.stringify(JSON_ERROR));
            } else {
                console.error(error);
            }
        });
    })
    .on('--help', function() {
        console.log('');
        console.log('The arg page starts on zero.');
        console.log('');
        console.log('\twalltime orderbook');
        console.log('\twalltime orderbook 0');
        console.log('\twalltime orderbook 5');
        console.log('\twalltime orderbook --totalpages');
    });

program
    .command('accountinfo')
    .description('Retrieve user account basic info.')
    .action(function() {
        if (checkForPassword() && checkForCredentials() && checkForUUID()) {
            var network = getNetwork();
            var uuid = ee.decrypt(password, localStorage.getItem(network + '.uuid'));
            var addressC = ee.decrypt(password, localStorage.getItem(network + '.pub'));
            var decryptedKey = ee.decrypt(password, localStorage.getItem(network + '.sec'));

            var nonce = common.nonce();

            common.callCommand(uuid, addressC, decryptedKey, nonce,
                'get-account-info', 'v1', {},
                program.verbose, program.json, program.testnet)
                .then(a => {
                    if (program.verbose) {
                        console.log();
                        console.log(a.status.description);
                        console.log();
                    }

                    if (a && a.status && a.status.description) {
                        console.log(JSON.stringify(a.account, null, 2));
                    }
                });
        }
    });

program
    .command('follow <nonce>')
    .usage('<nonce>')
    .description('Wait an answer in the nonce.')
    .action(function(nonce) {
        if (program.verbose) {
            console.log('Retrieving endpoint information...');
        }

        var errorFn = (error => {
            if (program.verbose) {
                console.error('ERROR:', error);
            }

            if (program.json) {
                console.log(JSON.stringify(JSON_ERROR));
            }
        });

        var globalResult;

        common.apiInfo(program.testnet).then(result => {
            globalResult = result;

            if (program.verbose) {
                process.stdout.write('Following the rabbit');
            }

            return common.followTheRabbit(globalResult.responsePrefix + nonce, program.verbose);
        }).then(a => {
            if (program.verbose) {
                console.log();
            }

            console.log(a);
        }).catch(errorFn);
    })
    .on('--help', function() {
        console.log('');
        console.log('Useful if you have interrupted a command and want to follow the server reply.');
        console.log('');
    });

program
    .command('accountstatement [daysago] [n_days] [minutes_offset]', {noHelp: true})
    .option('-e, --sendbyemail', 'Send the statement by email.')
    .usage('[-e] [daysago] [n_days] [minutes_offset]')
    .description('Retrieve account statement info.')
    .action(function(daysago, n_days, minutes_offset, options) {
        if (checkForPassword() && checkForCredentials() && checkForUUID()) {
            var network = getNetwork();
            var uuid = ee.decrypt(password, localStorage.getItem(network + '.uuid'));
            var addressC = ee.decrypt(password, localStorage.getItem(network + '.pub'));
            var decryptedKey = ee.decrypt(password, localStorage.getItem(network + '.sec'));

            var nonce = common.nonce();

            common.callCommand(uuid, addressC, decryptedKey, nonce,
                options.sendbyemail ? 'get-full-account-statement-and-send-by-email' : 'get-account-statement',
                'v1',
                {
                    days_ago : (daysago && parseInt(daysago)) || (options.sendbyemail ? 1825 : 30),
                    n_days : (n_days && parseInt(n_days)) || (options.sendbyemail ? 1825 : 30),
                    minutes_offset : (minutes_offset && parseInt(minutes_offset)) || 0
                },
                program.verbose, program.json, program.testnet)
                .then(a => {
                    if (program.verbose && a && a.status && a.status.description) {
                        console.log();
                        console.log(a.status.description);
                        console.log();
                    }

                    if (options.sendbyemail) {
                        if (a && a.zip_password) {
                            console.log('The password of the ZIP sent to your email is:', a.zip_password);
                        }
                    } else {
                        if (a && a.statement) {
                            console.log(JSON.stringify(a.statement, null, 2));
                        }
                    }
                });
        }
    })
    .on('--help', function() {
        console.log('');
        console.log('daysago - How many days ago from now the statement will start. Default: 30 or 1825 if -e is set.');
        console.log('n_days - How many days in total. Default: 30 and 1825 if -e is set.');
        console.log('minutes_offset - Your timezone minutes offset. For example, Brazilian minutes offset is -180 and UTC is 0. Default is 0.');
        console.log('');
        console.log('Examples:');
        console.log('');
        console.log('\twalltime accountstatement');
        console.log('\twalltime accountstatement -e');
        console.log('\twalltime accountstatement 10 10');
        console.log('\twalltime accountstatement 10 10 -- -180');
        console.log('\twalltime accountstatement -e 1825 1825');
        console.log('');
    });

program
    .command('getorders')
    .description('Retrieve information about orders.')
    .action(function() {
        if (checkForPassword() && checkForCredentials() && checkForUUID()) {
            var network = getNetwork();
            var uuid = ee.decrypt(password, localStorage.getItem(network + '.uuid'));
            var addressC = ee.decrypt(password, localStorage.getItem(network + '.pub'));
            var decryptedKey = ee.decrypt(password, localStorage.getItem(network + '.sec'));

            var nonce = common.nonce();

            common.callCommand(uuid, addressC, decryptedKey, nonce,
                'get-orders', 'v1', {},
                program.verbose, program.json, program.testnet)
                .then(a => {
                    if (program.verbose) {
                        console.log();
                        console.log(a.status.description);
                        console.log();
                    }

                    if (a && a.status && a.status.description) {
                        console.log(JSON.stringify(a.orders, null, 2));
                    }
                });
        }
    });

program
    .command('newaddress [bech32] [currency] [amount]')
    .usage('[bech32] [currency] [amount]')
    .description('Generate a new crypto deposit address.')
    .action(function(bech32, currency, amount) {
        var bech32 = !(bech32 === 'false' || bech32 === 'f' || bech32 === 'legacy')
            && !!bech32;

        if (!currency) {
            currency = 'xbt';
        }

        if (checkForPassword() && checkForCredentials() && checkForUUID()) {
            var network = getNetwork();
            var uuid = ee.decrypt(password, localStorage.getItem(network + '.uuid'));
            var address = ee.decrypt(password, localStorage.getItem(network + '.pub'));
            var decryptedKey = ee.decrypt(password, localStorage.getItem(network + '.sec'));

            var nonce = common.nonce();

            common.callCommand(uuid, address, decryptedKey, nonce,
                'generate-new-deposit-address', 'v1', {
                    'currency': currency,
                    'declared_amount': ((amount && n2f(amount)) || '1/100000000'),
                    'bech32': bech32
                }, program.verbose, program.json, program.testnet)
                .then(a => {
                    if (a && a.address) {
                        console.log(a.address);
                    }
                });
        }
    })
    .on('--help', function() {
        console.log('');
        console.log('Default values:');
        console.log('\tbech32 = false\n\tcurrency = xbt\n\tamount = 0.00000001');
        console.log('');
        console.log('Examples:');
        console.log('');
        console.log('\twalltime newaddress');
        console.log('\twalltime newaddress true');
        console.log('\twalltime newaddress false xbt');
        console.log('\twalltime newaddress false xbt 0.005');
        console.log('');
    });

program
    .command('addbankaccount <currency> <agencynumber> <accountnumber> <accountdigit> <accounttype> <bankcode> <label> [extrainfo]', {noHelp: true})
    .usage('<currency> <agencynumber> [-d <agencydigit>] <accountnumber> <accountdigit> <cc|cp> <bankcode> <label> [extrainfo]')
    .description('Add a withdraw bank account.')
    .option('-d, --agencydigit <agencydigit>', 'OPTIONAL: Agency digit information. Most of Brazilian banks do not have this digit.')
    .action(function(currency, agencynumber, accountnumber, accountdigit, accounttype, bankcode, label, extrainfo, options) {
        if (!options.agencydigit) {
            options.agencydigit = '';
        }

        if (!extrainfo) {
            extrainfo = '';
        }

        if (accounttype != 'cc' && accounttype != 'cp') {
            if (program.json) {
                console.log(JSON.stringify(JSON_ERROR));
            } else {
                console.error('On accounttype use cc for checking account and cp for savings account.');
            }
        } else if (bankcode.length != 3) {
            if (program.json) {
                console.log(JSON.stringify(JSON_ERROR));
            } else {
                console.error('Bank code should have 3 digits. Complete with left-zeros when necessary.');
            }
        } else {
            var accountInfo = {
                account: accountnumber,
                account_digit: accountdigit,
                account_type: accounttype,
                agency : agencynumber,
                agency_digit : options.agencydigit,
                bank : bankcode,
                bank_other : '',
                currency : currency,
                label : label,
                extra_info : extrainfo,
                type : 'new'
            };

            if (checkForPassword() && checkForCredentials() && checkForUUID()) {
                var network = getNetwork();
                var uuid = ee.decrypt(password, localStorage.getItem(network + '.uuid'));
                var address = ee.decrypt(password, localStorage.getItem(network + '.pub'));
                var decryptedKey = ee.decrypt(password, localStorage.getItem(network + '.sec'));

                var nonce = common.nonce();

                common.callCommand(uuid, address, decryptedKey, nonce,
                    'add-withdraw-address', 'v1', {
                        'account_info': JSON.stringify(accountInfo)
                    }, program.verbose, program.json, program.testnet)
                    .then(a => {
                        if (a && a.status && a.status.description) {
                            console.log(a.status.description);
                        }
                    });
            }
        }
    })
    .on('--help', function() {
        console.log('');
        console.log('Examples:');
        console.log('');
        console.log('\twalltime addbankaccount brl 0001 -d X 54433 5 cc 001 "Banco do Brasil, ag. 0001-X, c/c 54433"');
        console.log('\twalltime addbankaccount brl 0021 24433 1 cp 341 "Banco ItaÃº, ag. 0021, c/p 24433-1"');
        console.log('\twalltime addbankaccount brl 3422 4822 4 cc 341 "Banco ItaÃº, ag. 0021, c/p 24433-1" "Any observation."');
        console.log('');
        console.log('It is NOT possible to add the same account twice or more. An UNKNOWN_ERROR will be raised if you try.');
        console.log('');
    });

program
    .command('addaddress <address> <currency> [label]')
    .usage('<address> <currency> [label]')
    .description('Add a new crypto exit address.')
    .action(function(address, currency, label) {
        if (!label) {
            label = address;
        }

        var accountInfo = {
            address : address,
            currency : currency,
            label : label,
            type : 'new'
        };

        if (checkForPassword() && checkForCredentials() && checkForUUID()) {
            var network = getNetwork();
            var uuid = ee.decrypt(password, localStorage.getItem(network + '.uuid'));
            var addressC = ee.decrypt(password, localStorage.getItem(network + '.pub'));
            var decryptedKey = ee.decrypt(password, localStorage.getItem(network + '.sec'));

            var nonce = common.nonce();

            common.callCommand(uuid, addressC, decryptedKey, nonce,
                'add-withdraw-address', 'v1', {
                    'account_info': JSON.stringify(accountInfo)
                }, program.verbose, program.json, program.testnet)
                .then(a => {
                    if (a && a.status && a.status.description) {
                        console.log(a.status.description);
                    }
                });
        }
    })
    .on('--help', function() {
        console.log('');
        console.log('Examples:');
        console.log('');
        console.log('\twalltime addaddress xbt 1LipeR1AjHL6gwE7WQECW4a2H4tuqm768N');
        console.log('\twalltime addaddress xbt 1LipeR1AjHL6gwE7WQECW4a2H4tuqm768N "Mycelium Motorola Z2"');
        console.log('\twalltime addaddress xbt 1LipeR1AjHL6gwE7WQECW4a2H4tuqm768N "Electrum New PC"');
        console.log('\twalltime -tv addaddress xbt tb1qzt7vq2akzhxfmty7uh0k5rhuf579deyk89gdye');
        console.log('');
        console.log('It is NOT possible to add the same account twice or more. An UNKNOWN_ERROR will be raised if you try.');
        console.log('');
    });

program
    .command('createorder <operation> <volumeinxbt> <priceinbrl>', {noHelp: true})
    .usage('<operation> <buy|sell> <priceinbrl>')
    .description('Create an order.')
    .action(function(operation, volumeinxbt, priceinbrl) {
        if (checkForPassword() && checkForCredentials() && checkForUUID()) {
            var network = getNetwork();
            var uuid = ee.decrypt(password, localStorage.getItem(network + '.uuid'));
            var addressC = ee.decrypt(password, localStorage.getItem(network + '.pub'));
            var decryptedKey = ee.decrypt(password, localStorage.getItem(network + '.sec'));

            if (operation != 'buy' && operation != 'sell') {
                if (program.json) {
                    console.log(JSON.stringify(JSON_ERROR));
                } else {
                    console.error('Operation can be buy or sell.');
                }
            } else {
                var nonce = common.nonce();
                var sourceAmount;
                var targetAmount;

                if (operation == 'sell') {
                    sourceAmount = parseFloat(volumeinxbt);
                    targetAmount = parseFloat(volumeinxbt) * parseFloat(priceinbrl);
                } else {
                    sourceAmount = parseFloat(volumeinxbt) * parseFloat(priceinbrl);
                    targetAmount = parseFloat(volumeinxbt);
                }

                var order = {
                    'source_amount': n2f(sourceAmount),
                    'source_symbol': operation == 'buy' ? 'brl' : 'xbt',
                    'target_amount': n2f(targetAmount),
                    'target_symbol': operation == 'buy' ? 'xbt' : 'brl'
                };

                if (program.verbose) {
                    console.log('Order information:');
                    console.log('');
                    console.log(order);
                    console.log('');
                }

                common.callCommand(uuid, addressC, decryptedKey, nonce,
                    'create-order', 'v1', order, program.verbose, program.json, program.testnet)
                    .then(a => {
                        if (program.verbose) {
                            console.log();
                        }

                        if (a && a.status && a.status.description) {
                            console.log(a.status.description);
                            console.log();
                            console.log(a.order_id);
                        }
                    });
            }
        }
    })
    .on('--help', function() {
        console.log('');
        console.log('Examples:');
        console.log('');
        console.log('\twalltime createorder buy 0.01 30000');
        console.log('\twalltime createorder sell 0.01 30000');
        console.log('\twalltime -vj createorder sell 0.01 30000');
        console.log('');
    });

program
    .command('trycancelorder <orderid>')
    .usage('<orderid>')
    .description('Try to cancel an order.')
    .action(function(orderid) {
        if (checkForPassword() && checkForCredentials() && checkForUUID()) {
            var network = getNetwork();
            var uuid = ee.decrypt(password, localStorage.getItem(network + '.uuid'));
            var addressC = ee.decrypt(password, localStorage.getItem(network + '.pub'));
            var decryptedKey = ee.decrypt(password, localStorage.getItem(network + '.sec'));

            var nonce = common.nonce();

            common.callCommand(uuid, addressC, decryptedKey, nonce,
                'cancel-order', 'v1', {
                    id : orderid
                }, program.verbose, program.json, program.testnet)
                .then(a => {
                    if (program.verbose) {
                        console.log();
                    }

                    if (a && a.status && a.status.description) {
                        console.log(a.status.description);
                    }
                });
        }
    });

program
    .command('informdeposit <amount> <currency> <receipt> <sourcebank> <destinationbank>', {noHelp: true})
    .option('-f, --force', 'force inform deposit above the hard limit')
    .usage('[-f] <amount> <currency> <receipt> <sourcebank> <destinationbank>')
    .description('Inform a new fiat deposit to our system.')
    .action(function(amount, currency, receipt, sourcebank, destinationbank, options) {
        if (checkForPassword() && checkForCredentials() && checkForUUID()) {
            if (sourcebank.length != 3 || destinationbank.length != 3) {
                if (program.json) {
                    console.log(JSON.stringify(JSON_ERROR));
                } else {
                    console.error('Bank code should have 3 digits. Complete with left-zeros when necessary.');
                }
            } if (parseFloat(amount) > common.DEPOSIT_HARD_LIMIT && !options.force) {
                if (program.json) {
                    console.log(JSON.stringify(JSON_ERROR));
                } else {
                    console.error('Deposits above ' + common.DEPOSIT_HARD_LIMIT
                        + ' are unlikely to be approved. If you are sure about what you are doing, pass -f as option parameter.')
                }
            } else {
                var network = getNetwork();
                var uuid = ee.decrypt(password, localStorage.getItem(network + '.uuid'));
                var addressC = ee.decrypt(password, localStorage.getItem(network + '.pub'));
                var decryptedKey = ee.decrypt(password, localStorage.getItem(network + '.sec'));

                var nonce = common.nonce();

                common.callCommand(uuid, addressC, decryptedKey, nonce,
                    'inform-deposit', 'v1', {
                        declared_value: n2f(amount),
                        deposit_info: JSON.stringify({
                            address: common.nonce(),
                            currency: currency,
                            receipt: receipt,
                            sourceBankId: sourcebank,
                            destinationBankId: destinationbank
                        })
                    }, program.verbose, program.json, program.testnet)
                    .then(a => {
                        if (program.verbose) {
                            console.log();
                        }

                        if (a && a.status && a.status.description) {
                            console.log(a.status.description);
                        }
                    });
            }
        }
    })
    .on('--help', function() {
        console.log('');
        console.log('The receipt param can be a URL to a image, PDF or can be a text with the transfer bank ID. Source and destination bank should have 3 digits.');
        console.log('');
        console.log('Example:');
        console.log('');
        console.log('\twalltime informdeposit 1000.23 brl "Transfer from Bradesco 296fcd184f698fae9b502342c8" 351 001');
        console.log('');
    });

program
    .command('withdraw <amount> <currency> <withdraw_address>', {noHelp: true})
    .option('-n, --networkfee <networkfee>', 'set the network fee')
    .usage('[-n <networkfee>] <amount> <currency> <withdraw_address>')
    .description('Inform a new fiat deposit to our system.')
    .action(function(amount, currency, withdraw_address, options) {
        var error = false;

        if (checkForPassword() && checkForCredentials() && checkForUUID()) {
            if (!options.networkfee && currency == 'xbt') {
                if (program.json) {
                    console.log(JSON.stringify(JSON_ERROR));
                } else {
                    console.error('The network fee is necessary to xbt currency.');
                }
            } else if (currency == 'xbt') {
                var parsedNetworkFee = parseFloat(options.networkfee);
                if (parsedNetworkFee > common.NETWORK_XBT_FEE_HARD_LIMIT_MAX
                    || parsedNetworkFee < common.NETWORK_XBT_FEE_HARD_LIMIT_MIN) {

                    if (program.json) {
                        console.log(JSON.stringify(JSON_ERROR));
                    } else {
                        console.error('The network fee is out of range. Min: '
                            + common.NETWORK_XBT_FEE_HARD_LIMIT_MIN + ', Max: '
                            + common.NETWORK_XBT_FEE_HARD_LIMIT_MAX);
                    }

                    error = true;
                }
            }

            if (!error) {
                var network = getNetwork();
                var uuid = ee.decrypt(password, localStorage.getItem(network + '.uuid'));
                var addressC = ee.decrypt(password, localStorage.getItem(network + '.pub'));
                var decryptedKey = ee.decrypt(password, localStorage.getItem(network + '.sec'));

                var nonce = common.nonce();

                common.callCommand(uuid, addressC, decryptedKey, nonce,
                    'request-withdraw', 'v1', {
                        account_info: JSON.stringify({
                            currency : currency,
                            id : withdraw_address,
                            label : '',
                            last_used : '',
                            type : 'old'
                        }),
                        amount : n2f(amount),
                        force_fee : n2f(parseFloat(options.networkfee || '0'))
                    }, program.verbose, program.json, program.testnet)
                    .then(a => {
                        if (program.verbose) {
                            console.log();
                        }

                        if (a && a.status && a.status.description) {
                            console.log(a.status.description);
                        }
                    });
            }
        }
    })
    .on('--help', function() {
        console.log('');
        console.log('You can get withdraw_address using the command "accountinfo".');
        console.log('');
        console.log('Example:');
        console.log('');
        console.log('\twalltime withdraw 20.03 brl 96dd3ca9009f93e960b1f351c8969efd710296fcd184f698fae9b502342c856e');
        console.log('\twalltime withdraw -n 0.0001 0.001 xbt tb1qzt7vq2akzhxfmty7uh0k5rhuf579deyk89gdye');
        console.log('');
    });

if (!process.argv.slice(2).length) {
    program.outputHelp(processOutput);
}

function processOutput(txt) {
    return txt;
}

program.parse(process.argv);
