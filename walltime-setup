#!/usr/bin/env node

'use strict';
const program = require('commander');

if (typeof localStorage === "undefined" || localStorage === null) {
    var LocalStorage = require('node-localstorage').LocalStorage;
    var localStorage = new LocalStorage('./db');
}

const ee = require('easy-encryption');
const btc = require('bitcore-lib');

program
    .option('-t, --testnet', 'use testnet')
    .option('-j, --json', 'return in json format')
    .parse(process.argv);

var password = process.env.WT_SECRET;
var uuid = program.args[0];

if (!password) {
    if (program.json) {
        console.log(JSON.stringify({'error': true}));
    } else {
        console.error('Please, set the WT_SECRET env variable. It is required to encrypt your UUID on disk.');
    }
} else if (!uuid) {
    if (program.json) {
        console.log(JSON.stringify({'error': true}));
    } else {
        console.error('UUID as parameter is mandatory. Ask to our 24h support after call "walltime init".');
    }
} else {
    var network;

    if (program.testnet) {
        network = btc.Networks.testnet;
    } else {
        network = btc.Networks.livenet;
    }

    if (!localStorage.getItem(network + '.pub')) {
        if (program.json) {
            console.log(JSON.stringify({'error': true}));
        } else {
            console.error('You don\'t have credentials yet. Create one using init command.');
        }
    } else {
        if (localStorage.getItem(network + '.uuid') && !program.json) {
            console.warn('[WARN] The UUID will be overwritten!');
        }

        if (program.json) {
            console.log(JSON.stringify({'success': true}));
        } else {
            localStorage.setItem(network + '.uuid', ee.encrypt(password, uuid));
            console.log('UUID stored!');
        }
    }
}