#!/usr/bin/env node

'use strict';
const program = require('commander');

if (typeof localStorage === "undefined" || localStorage === null) {
    var LocalStorage = require('node-localstorage').LocalStorage;
    var localStorage = new LocalStorage('./db');
}

const btc = require('bitcore-lib');
const ee = require('easy-encryption');
const common = require('./common');

program
    .option('-t, --testnet', 'use testnet')
    .option('-j, --json', 'return in json format')
    .option('-v, --verbose', 'verbose mode')
    .description('Generate a new crypto deposit address.')
    .parse(process.argv);

var password = process.env.WT_SECRET;

if (program.args.length > 2) {
    if (program.json) {
        console.log(JSON.stringify({'error': true}));
    } else {
        console.error('Invalid number of arguments.');
    }
} else {
    var bech32 = program.args.pop();
    var currency = program.args.pop();

    bech32 = !(bech32 === 'false') && !!bech32;

    if (!currency) {
        currency = 'xbt';
    }

    if (!password) {
        if (program.json) {
            console.log(JSON.stringify({'error': true}));
        } else {
            console.error('Please, set the WT_SECRET env variable.');
        }
    } else {
        var network;

        if (program.testnet) {
            network = btc.Networks.testnet;
        } else {
            network = btc.Networks.livenet;
        }

        var uuid = localStorage.getItem(network + '.uuid') &&
            ee.decrypt(password, localStorage.getItem(network + '.uuid'));

        if (!localStorage.getItem(network + '.pub')) {
            if (program.json) {
                console.log(JSON.stringify({'error': true}));
            } else {
                console.error('You don\'t have credentials yet. Create one using init command.');
            }
        } else if (!uuid) {
            if (program.json) {
                console.log(JSON.stringify({'error': true}));
            } else {
                console.error('You didn\'t setup your UUID yet. Call "walltime setup <uuid>".');
            }
        } else {
            var address = ee.decrypt(password, localStorage.getItem(network + '.pub'));
            var decryptedKey = ee.decrypt(password, localStorage.getItem(network + '.sec'));

            if (program.verbose) {
                console.log('Retrieving endpoint information...');
            }

            var nonce = common.nonce();

            common.callCommand(uuid, address, decryptedKey, nonce,
                'generate-new-deposit-address', 'v1', {
                'currency': currency,
                'declared_amount': '1/100000000',
                'bech32': bech32
            }, program.verbose, program.json, program.testnet)
            .then(a => {
                if (a && a.address) {
                    console.log(a.address);
                }
            });
        }
    }
}